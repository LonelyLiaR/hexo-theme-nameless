
"use strict";

//  Ajax.
var _Ajax = function(e) {
    e = e || {};
    e.method = (e.method || "GET").toUpperCase();
    e.asnyc = e.asnyc || true;
    e.postType = (e.postType || 'FORM').toUpperCase();
    if (e.postType == 'FORM') {
        var data = (function(data) {
            var arr = [];
            for (var name in data) {
                if (data.hasOwnProperty(name)) {
                    arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(data[name]));
                };
            };
            return arr.join("&");
        })(e.data);
    } else if (e.postType == 'JSON') {
        var data = JSON.stringify(e.data);
    };
    var X;
    if (window.XMLHttpRequest) {
        X = new XMLHttpRequest();
    } else {
        X = new ActiveXObject('Microsoft.XMLHTTP');
    };
    X.onreadystatechange = function() {
        if (X.readyState == 4) {
            if (X.status >= 200 && X.status < 300) {
                e.success && e.success(X.responseText, X.responseXML);
            } else {
                e.fail && e.fail();
            };
        };
    };
    if (e.method == "GET") {
        if (data != '') {
            data = '?' + data;
        };
        X.open("GET", e.url + data, e.asnyc);
        X.send(null);
    } else if (e.method == "POST") {
        X.open("POST", e.url, e.asnyc);
        //设置表单提交时的内容类型
        if (e.postType == 'FORM') {
            X.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        } else if (e.postType == 'JSON') {
            X.setRequestHeader("Content-Type", "application/json");
        };
        X.send(data);
    };
};

//  Pjax. My Simple Edition.
var _Pjax = function(s, c) {
    if (_Ls(c).length != undefined || _Ls(c) == null || _Ls(c) == undefined) {
        console.error('container is not the right value form.');
        return;
    };
    if (_Ls(s) == null || _Ls(s) == undefined) {
        console.error('selector is not the right value form.');
        return;
    };
    _LS(_Ls(s)).forEach(function(that) {
        if (that.tagName.toUpperCase() != 'A') {
            console.error('selector is not the right value form.');
            return;
        };
        _LS(that).off('click');
        _LS(that).on('click', function(e) {
            e.preventDefault();
            pjax(this.href, true);
        });
    });
    _LS(window).off('popstate');
    _LS(window).on('popstate', function(e) {
        pjax(location.href, false);
    });

    function pjax(url, state) {
        var container = _Create('html');
        new Promise(function(resolve, reject) {
            LProgress.start();
            _Ajax({
                url: /^\/.*\/$/.test(url) ? url : url + '/',
                success: function(r) {
                    container.innerHTML = r;
                    resolve(container);
                },
                fail: function() {
                    console.error('So maybe your code somewhere is wrong, try to check and rewrite it. ):');
                    reject();
                }
            });
        }).then(function(_c) {
            if (_LS(_c).child(c).length != undefined || _LS(_c).child(c) == null || _LS(_c).child(c) == undefined) {
                console.error('container is not the right value form.');
                return;
            };
            if (state) {
                var State = {
                    title: _LS(_c).child('title').innerText,
                    url: url
                };
                var _state = history.state;
                navigator.userAgent.indexOf('Firefox') != -1 ?
                    window.history.replaceState({
                        title: document.title,
                        scrollTop: document.documentElement.scrollTop
                    }, document.title, location.href) :
                    window.history.replaceState({
                        title: document.title,
                        scrollTop: document.body.scrollTop
                    }, document.title, location.href);
                window.history.pushState(State, State.title, State.url);
                _Ls('title').innerText = _LS(_c).child('title').innerText;
            };
            _Ls(c).innerHTML = _LS(_c).child(c).innerHTML;
            document.title = history.state.title;
            if (navigator.userAgent.indexOf('Firefox') != -1) {
                document.documentElement.scrollTop = 0;
                if (history.state.scrollTop) {
                    document.documentElement.scrollTop = history.state.scrollTop;
                };
            } else {
                document.body.scrollTop = 0;
                if (history.state.scrollTop) {
                    document.body.scrollTop = history.state.scrollTop;
                };
            };
            LProgress.done();
            _Pjax(s, c);
        });
    };
};

//  Stop Bubble.
var SB = function() {
    var E = E || window.event;
    if (window.event) {
        E.cancelBubble = true;
    } else {
        E.stopPropagation();
    };
};

//  Create Element.
var _Create = function(type, content, appendToObj) {
    var e = document.createElement(type);
    for (var i in content) {
        if (content.hasOwnProperty(i)) {
            if (i.toLowerCase() == 'class') {
                e.className = content[i];
            } else if (i.toLowerCase() == 'style') {
                e.style.cssText = content[i];
            } else if (i.toLowerCase() == 'innerhtml') {
                e.innerHTML = content[i];
            } else if (i.toLowerCase() == 'innertext') {
                e.innerText = content[i];
            } else {
                e[i] = content[i];
                _LS(e).attr(i, content[i]);
            };
        };
    };
    if (appendToObj == 'body') {
        appendToObj = document.body;
    };
    if (appendToObj != "" && appendToObj != null && appendToObj != undefined) {
        appendToObj.appendChild(e);
    };
    return e;
};

//  L's Selector.
var _Ls = function() {
    var A = arguments;
    if (A.length != 1) {
        console.error('Error !!! The selector affects only one, SORRY :(');
        return underfined;
    } else {
        try {
            if (document.querySelectorAll(A[0]).length > 1) {
                return document.querySelectorAll(A[0]);
            } else {
                return document.querySelector(A[0]);
            };
        } catch (err) {
            return A[0];
        };
    };
};

//  L's Simple method.
var _LSm = function(DOM) {
    this.dom = DOM;
};
var method = _LSm.prototype;
var _LS = function(DOM) {
    return new _LSm(DOM);
};

document.getElementByAttr = function(attr, param) { //  根据自定义属性寻找对象.
    var element = this.dom.querySelectorAll("*");
    var arr = [];
    var arr2 = [];
    for (var i = 0; i < element.length; i++) {
        if (element[i].getAttribute(attr) != null) {
            arr.push(element[i]);
        };
    };
    if (param) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i].getAttribute(attr) == param) {
                arr2.push(arr[i]);
            };
        };
        return arr2;
    } else {
        return arr;
    };
};

method.attr = function() { //  获取属性值(若有两个参数则修改属性值).
    if (arguments[1]) {
        this.dom.setAttribute(arguments[0], arguments[1]);
        return;
    } else {
        return this.dom.getAttribute(arguments[0]);
    };
};

method.removeAttr = function() {
    if (arguments.length > 1) {
        for (var i = 0; i < arguments.length; i++) {
            this.dom.removeAttribute(arguments[i]);
        };
    } else if (arguments.length == 0) {
        return;
    } else {
        this.dom.removeAttribute(arguments[0]);
    };
    return this;
};

method.empty = function() {
    if (this.dom.value) {
        this.dom.value = '';
    };
    this.dom.innerHTML = '';
    return;
};

method.addClass = function() { //  添加Class(可填多个参数).
    for (var i = 0; i < arguments.length; i++) {
        try {
            this.dom.classList.add(arguments[i]);
        } catch (err) {
            if (this.dom.className.split(/\s+/).length > 0) {
                this.dom.className += ' ';
            };
            this.dom.className += arguments[i];
        };
    };
    return this;
};

method.removeClass = function() { //  删除Class(可填多个参数).
    for (var i = 0; i < arguments.length; i++) {
        try {
            this.dom.classList.remove(arguments[i]);
        } catch (err) {
            var C = new RegExp('(\\s|^)' + arguments[i] + '(\\s|$)');
            this.dom.className = this.dom.className.replace(C, '');
        };
    };
    return this;
};

method.toggleClass = function() { //  添加 || 删除Class(可填多个参数).
    for (var i = 0; i < arguments.length; i++) {
        if (_LS(this.dom).hasClass(arguments[i])) {
            _LS(this.dom).removeClass(arguments[i]);
        } else {
            _LS(this.dom).addClass(arguments[i]);
        };
    };
    return this;
};

method.hasClass = function(cN) { //  查询有无参数Class.
    try {
        return this.dom.classList.contains(cN);
    } catch (err) {
        for (var x in this.dom.className.split(/\s+/)) {
            if (this.dom.className.split(/\s+/)[x] == cN) {
                return true;
            };
        };
        return false;
    };
};

method.css = function() {
    if (arguments.length == 0) {
        return window.getComputedStyle(this.dom, null);
    } else {
        if (arguments[0].toLowerCase() == ':before' || arguments[0].toLowerCase() == ':after') {
            if (arguments[1]) {
                if (arguments.length > 2) {
                    var arr = [];
                    for (var i = 1; i < arguments.length; i++) {
                        arr[arguments[i]] = window.getComputedStyle(this.dom, arguments[0].toLowerCase()).getPropertyValue(arguments[i]);
                    };
                    return arr;
                } else {
                    return window.getComputedStyle(this.dom, arguments[0].toLowerCase()).getPropertyValue(arguments[1]);
                };
            } else {
                return window.getComputedStyle(this.dom, arguments[0].toLowerCase());
            };
        } else {
            if (arguments.length > 1) {
                var arr = [];
                for (var i = 1; i < arguments.length; i++) {
                    arr[arguments[i]] = window.getComputedStyle(this.dom, null).getPropertyValue(arguments[i]);
                };
                return arr;
            } else {
                return window.getComputedStyle(this.dom, null).getPropertyValue(arguments[0]);
            };
        };
    };
};

method.removeStyle = function() { //  删除Style(可填多个参数).
    for (var i = 0; i < arguments.length; i++) {
        this.dom.style[arguments[i]] = '';
    };
    return this;
};

method.parent = function() {
    if (arguments.length == 1) {
        var _o = this.dom.parentNode;
        var arr = [];
        while (_o != undefined && _o != null && _o.tagName.toUpperCase() != 'BODY') {
            if (_LS(_o).hasClass(arguments[0].replace('.', '')) || _o.id == arguments[0].replace('#', '')) {
                arr.push(_o);
            };
            _o = _o.parentNode;
        };
        return arr;
    } else {
        return this.dom.parentNode;
    };
};

method.isParent = function(P) {
    var _o = this.dom;
    while (_o != undefined && _o != null && _o.tagName.toUpperCase() != 'BODY') {
        if (_o == P) {
            return true;
        };
        _o = _o.parentNode;
    };
    return false;
};

method.child = function() {
    if (arguments.length == 1) {
        var R = this.dom.querySelectorAll(arguments[0]);
        R.length > 1 ? R = this.dom.querySelectorAll(arguments[0]) : (R.length > 0 ? R = this.dom.querySelector(arguments[0]) : R = '');
        return R;
    } else {
        return this.dom.children;
    };
};

method.hasChild = function(S) {
    var C = this.dom.querySelector(S);
    for (var x in this.dom.children) {
        if (this.dom.children[x] == C) {
            return true;
        };
    };
    return false;
};

method.remove = function() {
    if (this.dom != null && this.dom != undefined) {
        this.dom.parentNode.removeChild(this.dom);
    };
    return this;
};

method.clone = function() {
    var T = false;
    if (arguments[0] != '' && arguments[0] != null && arguments[0] != undefined) {
        if (arguments[0] == true) {
            T = true;
        };
    };
    return document.importNode(this.dom, T);
};

method.forEach = function(F) {
    if (this.dom) {
        if (!!this.dom.length) {
            for (var i = 0; i < this.dom.length; i++) {
                F(this.dom[i]);
            };
        } else {
            F(this.dom);
        };
    };
    return;
};

method.eventArr = [];
method.on = function() {
    var that = this.dom;
    var A = arguments;
    if (typeof A[0] != 'string' || typeof A[1] != 'function') {
        console.error('Param type is wrong!')
        return;
    };
    var uC = false;
    if (A[2]) {
        if (typeof A[2] != 'boolean' && (A[2].toUpperCase() != 'TRUE' || A[2].toUpperCase() != 'FALSE')) {
            console.error('Param type is wrong!')
            return;
        };
        uC = A[2];
    };
    if (that.addEventListener) {
        that.addEventListener(A[0], A[1], uC);
    } else if (that.attachEvent) {
        that.attachEvent(A[0], A[1]);
    };
    for (var i = 0; i < this.eventArr.length; i++) {
        if (this.eventArr[i].name == that) {
            if (!this.eventArr[i][A[0]]) {
                this.eventArr[i][A[0]] = [];
            };
            this.eventArr[i][A[0]].push(A[1]);
            break;
        };
    };
    if (i >= this.eventArr.length) {
        this.eventArr[i] = {};
        this.eventArr[i].name = that;
        this.eventArr[i][A[0]] = [];
        this.eventArr[i][A[0]].push(A[1]);
    };
};

method.off = function() {
    var that = this.dom;
    var A = arguments;
    if (typeof A[0] != 'string' || (A[1] && typeof A[1] != 'function')) {
        console.error('Param type is wrong!')
        return;
    };
    if (!A[0]) {
        this.eventArr.forEach(function(v, i) {
            if (v.name == that) {
                for (var j in v) {
                    if (j != 'name') {
                        v[j].forEach(function(value, index) {
                            that.removeEventListener(j, value);
                        });
                    };
                };
                v[j].length = 0;
            };
        });
    } else if (!A[1]) {
        this.eventArr.forEach(function(v, i) {
            if (v.name == that) {
                v[A[0]].forEach(function(value, index) {
                    that.removeEventListener(A[0], value);
                });
                v[A[0]].length = 0;
            };
        });
    } else {
        this.eventArr.forEach(function(v, i) {
            if (v.name == that) {
                for (var m = 0; m < v[A[0]].length; m++) {
                    if (A[1] == v[A[0]][m]) {
                        that.removeEventListener(A[0], A[1]);
                        v[A[0]].splice(m, 1);
                        break;
                    };
                };
            };
        });
    };
};

method.fadeOut = function() { //    淡入
    var that = this.dom;
    var A = arguments;
    var S = 200;
    if (A[0] && !isNaN(A[0])) {
        S = A[0] / 5;
    };
    var R = function() {
        return;
    };
    var T, C = 0;
    T = setInterval(function() {
        C++;
        that.filters ? that.style.filter = 'alpha(opacity=' + 100 - (100 * C) / S + ')' : that.style.opacity = 1 - (1 * C) / S;
        if (C == S) {
            clearTimeout(T);
            that.style.display = 'none';
            that.style.visibility = 'hidden';
            A[0] && typeof A[0] == 'function' ? A[0]() : (A[1] && typeof A[1] == 'function' ? A[1]() : R());
        };
    }, 1);
    return this;
};

method.fadeIn = function() { //   浅出
    if (this.dom.style.display != 'block') {
        var that = this.dom;
        var A = arguments;
        that.style.display = 'block';
        that.style.visibility = 'visible';
        var S = 200;
        if (A[0] && !isNaN(A[0])) {
            S = A[0] / 5;
        };
        var R = function() {
            return;
        };
        var T, C = 0;
        T = setInterval(function() {
            C++;
            that.filters ? that.style.filter = 'alpha(opacity=' + 0 + (100 * C) / S + ')' : that.style.opacity = 0 + (1 * C) / S;
            if (C == S) {
                clearTimeout(T);
                A[0] && typeof A[0] == 'function' ? A[0]() : (A[1] && typeof A[1] == 'function' ? A[1]() : R());
            };
        }, 1);
    };
    return this;
};

/**
 *  LProgress.
 */
(function(root, factory) {
    root.LProgress = factory();
    return;
})(this, function() {
    var LProgress = {};
    var Settings = LProgress.Settings = {
        minimum: 0.08,
        speed: 400,
        trickle: true,
        trickleSpeed: 800,
        trickleRate: 0.02,
        showSpinner: true,
        barSelector: '[class="bar"]',
        spinnerSelector: '[class="spinner"]',
        parent: 'body',
        template: '<div class="bar"></div><div class="spinner"></div>'
    };
    LProgress.status = null;
    LProgress.afterDone = null;
    LProgress.render = function(fromStart) {
        if (LProgress.isRendered()) {
            return _Ls('#lprogress');
        };
        var progress = _Create('div', {
            'id': 'lprogress',
            'innerHTML': Settings.template
        }, Settings.parent)
        var bar = _LS(progress).child(Settings.barSelector);
        var perc = fromStart ? '100%' : toBarPerc(LProgress.status || 0);
        bar.style.cssText = 'transform: translate3d(-' + perc + ', 0px, 0px);';
        if (!Settings.showSpinner) {
            var spinner = _LS(progress).child(Settings.spinnerSelector);
            _LS(spinner).remove();
        };
        return progress;
    };
    LProgress.isRendered = function() {
        return !!_Ls('#lprogress');
    };
    LProgress.start = function() {
        if (!LProgress.status) {
            LProgress.set(0);
        };
        var work = function() {
            setTimeout(function() {
                if (!LProgress.status) {
                    return;
                };
                LProgress.trickle();
                work();
            }, Settings.trickleSpeed);
        };
        if (Settings.trickle) {
            work();
        };
        return this;
    };
    LProgress.isStarted = function() {
        return typeof LProgress.status === 'string';
    };
    LProgress.set = function(n) {
        var started = LProgress.isStarted();
        n = clamp(n, Settings.minimum, 1);
        LProgress.status = toBarPerc(toBarPerc(n));
        n = toBarPerc(LProgress.status);
        var progress = LProgress.render(!started);
        var bar = _LS(progress).child(Settings.barSelector);
        var speed = Settings.speed;
        if (!LProgress.status) {
            return;
        };
        progress.offsetWidth; //   Repaint.
        queue(function(next) {
            bar.style.cssText = 'transform: translate3d(-' + n + ', 0px, 0px);';
            if (LProgress.status == '100%') {
                setTimeout(function() {
                    progress.style.cssText = 'opacity: 0;';
                    setTimeout(function() {
                        LProgress.remove();
                        next();
                    }, speed);
                }, speed);
            } else {
                setTimeout(next, speed);
            };
        });
        return this;
    };
    LProgress.trickle = function() {
        return LProgress.inc(Math.random() * Settings.trickleRate);
    };
    LProgress.inc = function(amount) {
        var n = LProgress.status;
        if (!n) {
            return LProgress.start();
        } else {
            n = parseFloat(n.replace('%', '')) / 100;
            if (typeof amount !== 'number') {
                amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);
            };
            n = clamp(n + amount, 0, 0.994);
            return LProgress.set(n);
        };
    };
    LProgress.remove = function() {
        var progress = LProgress.render();
        _LS(progress).remove();
        LProgress.status = null;
    };
    LProgress.done = function(force) {
        if (!force && !LProgress.status) {
            return this;
        };
        if (this.afterDone != null && typeof this.afterDone == 'function') {
            LProgress.inc(0.3 + 0.5 * Math.random()).set(1)
            return this.afterDone();
        } else {
            return LProgress.inc(0.3 + 0.5 * Math.random()).set(1);
        };
    };

    // Helper function.
    function toBarPerc(n) {
        if (!n && n !== 0) {
            return null;
        };
        /^(100|[1-9]\d|\d)(\.\d*)?%$/g.test(n) ? (n = 100 - parseFloat(/^(100|[1-9]\d|\d)(\.\d{1,2})?/g.exec(n)[0]) + '%') : n = (100 - (Math.round(n * 10000) / 100).toFixed(2) + '%');
        if (/^NaN%$/g.test(n)) {
            return null;
        } else {
            return n;
        };
    };
    var queue = (function() {
        var pending = [];

        function next() {
            var fn = pending.shift();
            if (fn) {
                fn(next);
            };
        };
        return function(fn) {
            pending.push(fn);
            if (pending.length == 1) next();
        };
    })();

    function clamp(n, min, max) {
        if (n < min) {
            return min;
        };
        if (n > max) {
            return max;
        };
        return n;
    };
    return LProgress;
});
